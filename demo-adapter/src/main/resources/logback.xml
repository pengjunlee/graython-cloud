<?xml version="1.0" encoding="UTF-8"?>
<!-- scan:当此属性设置为true时，配置文档如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文档是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。 当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
<configuration scan="true" scanPeriod="160 seconds" debug="false">
-->
<configuration debug="false" scan="false">
    <!-- 自定义配置 -->
    <define name="ip" class="gray.bingo.starter.logback.LogIpConfig"/>
    <define name="hostName" class="gray.bingo.starter.logback.HostNameConfig"/>
    <conversionRule conversionWord="clr" converterClass="gray.bingo.starter.logback.CustomLogbackColor"/>
    <!-- Spring 配置 -->
    <springProperty scop="context" name="spring.application.name" source="spring.application.name" defaultValue=""/>
    <!-- 配置 -->
    <!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义后，可以使“${}”来使用变量。 -->
    <property name="log.path" value="logs"/>
    <property name="LOG_PATTERN"
              value="%clr(%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level[%-10.10thread] %magenta(${ip}) %-40.40logger{40} %-4line: %msg%xEx%n)"/>
    <property name="LOG_PATTERN_CONSOLE"
              value="%clr(%d{HH:mm:ss.SSS} %-5level[%-10.10thread] %magenta(${hostName}) %-30.30logger{30} %-3line: %msg%n)"/>

    <!-- ===============================================================================================================
     日志写入设置
     ================================================================================================================-->
    <!-- 控制台 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!-- 仅输出INFO级别及以上的日志 -->
            <level>info</level>
        </filter>
        <encoder>
            <pattern>${LOG_PATTERN_CONSOLE}</pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--
    滚动日志: ${log.path}/info.log
    文件大小: 50MB
    保留天数: 10
    记录级别: trace, debug, trace, warn, error
    压缩日志:
        logs/yyyy-MM/info.yyyy-MM-dd.0.log.gz
        logs/yyyy-MM/info.yyyy-MM-dd.1.log.gz
        ...
    -->
    <appender name="info" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/info.log</file>
        <!-- 按照大小和时间滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/%d{yyyy-MM, aux}/info.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <maxFileSize>50MB</maxFileSize>
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <!-- 日志格式 -->
        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
    </appender>

    <!--
    滚动日志: ${log.path}/error.log
    文件大小: 50MB
    保留天数: 10
    记录级别: error
    压缩日志:
        logs/yyyy-MM/error.yyyy-MM-dd.0.log.gz
        logs/yyyy-MM/error.yyyy-MM-dd.1.log.gz
        ...
    -->
    <appender name="error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/%d{yyyy-MM}/error.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <maxFileSize>50MB</maxFileSize>
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
        <!-- 该日志文件中允许写入的日志级别 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
    </appender>

    <appender name="slowsql" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/slowsql.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/%d{yyyy-MM}/slowsql.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <maxFileSize>50MB</maxFileSize>
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
        <!-- 该日志文件中允许写入的日志级别 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
    </appender>

    <!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
    <root level="TRACE">
        <appender-ref ref="console"/>
        <appender-ref ref="info"/>
        <appender-ref ref="error"/>
    </root>


    <!--打印 SlowSQLInterceptor 类下的 info 级别以上日志，并使用 slowsql 配置生成日志文件 -->
    <logger name="gray.bingo.mybatis.config.SlowSQLInterceptor" level="INFO" additivity="false">
        <appender-ref ref="console"/>
        <appender-ref ref="slowsql"/>
    </logger>
</configuration>